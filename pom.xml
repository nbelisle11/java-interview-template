<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>7</version>
  </parent>

  <groupId>com.nbelisle.interview</groupId>
  <artifactId>company-interview</artifactId>
  <version>HEAD-SNAPSHOT</version>

  <packaging>jar</packaging>
  <name>Nate Belisle Interview</name>

  <description>Interview Template</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- By default, just re-write code with prettier -->
    <plugin.prettier.goal>write</plugin.prettier.goal>

    <java.version>17</java.version>
    <guava.version>30.1.1-jre</guava.version>
    <junit.version>4.13.1</junit.version>
    <junit5.version>5.9.2</junit5.version>
    <assertj.version>3.24.2</assertj.version>
    <mockito.version>5.2.0</mockito.version>
    <slf4j.version>1.7.36</slf4j.version>
    <hamcrest.version>1.3</hamcrest.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.12.0</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <!-- By default, just re-write code with prettier -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit5.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit5.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${junit5.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <!-- <pluginManagement> -->
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.3.0</version>
          <configuration>
            <archive>
              <manifest>
                <addClasspath>true</addClasspath>
                <classpathPrefix>lib/</classpathPrefix>
                <mainClass>com.nbelisle.interview.Main</mainClass>
              </manifest>
            </archive>
          </configuration>
        </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
                <execution>
                    <id>copy-dependencies</id>
                    <phase>prepare-package</phase>
                    <goals>
                        <goal>copy-dependencies</goal>
                    </goals>
                    <configuration>
                        <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        <overWriteReleases>false</overWriteReleases>
                        <overWriteSnapshots>false</overWriteSnapshots>
                        <overWriteIfNewer>true</overWriteIfNewer>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.11.0</version>
          <inherited>true</inherited>
          <configuration>
            <source>${java.version}</source>
            <target>${java.version}</target>
            <compilerArgument>-Xlint:unchecked</compilerArgument>
          </configuration>
        </plugin>
        <plugin>
          <groupId>com.github.ekryd.sortpom</groupId>
          <artifactId>sortpom-maven-plugin</artifactId>
          <version>3.2.1</version>
        </plugin>
        <plugin>
          <groupId>com.hubspot.maven.plugins</groupId>
          <artifactId>prettier-maven-plugin</artifactId>
          <version>0.19</version>
          <configuration>
            <prettierJavaVersion>2.0.0</prettierJavaVersion>
            <printWidth>120</printWidth>
            <tabWidth>2</tabWidth>
            <useTabs>false</useTabs>
            <ignoreConfigFile>true</ignoreConfigFile>
            <ignoreEditorConfig>true</ignoreEditorConfig>
            <!-- Use <inputGlobs> to override the default input patterns -->
            <inputGlobs>
              <!-- These are the default patterns, you can omit <inputGlobs> entirely unless you want to override them -->
              <inputGlob>src/main/java/**/*.java</inputGlob>
              <inputGlob>src/test/java/**/*.java</inputGlob>
            </inputGlobs>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>${plugin.prettier.goal}</goal>
              </goals>
              <phase>validate</phase>
            </execution>
          </executions>
        </plugin>
      </plugins>
    <!-- </pluginManagement> -->
  </build>

  <profiles>
    <profile>
      <id>travis</id>
      <activation>
        <property>
          <name>env.TRAVIS</name>
        </property>
      </activation>
      <properties>
        <!-- But in our CI environment we want to validate that code is formatted -->
        <plugin.prettier.goal>check</plugin.prettier.goal>
      </properties>
    </profile>
  </profiles>
</project>
